#!/usr/bin/env node

var fs = require('fs');
var readline = require('readline');
var pkg = require(__dirname + "/../package.json");
var underlineMsg = require(__dirname + '/../lib/Utils.js').underlineMsg;
var Config = require(__dirname + '/../lib/Config.js');
var ShrinkApp = require(__dirname + '/../ShrinkApp.js');

var dirPath = '';
var force = false;
var displayAnalysis = false;

var shrinkApp = function() {
  if (dirPath && fs.existsSync(dirPath)) {
    //start the shrink process
    var appConfig = dirPath + '/app.json';
    if (fs.existsSync(appConfig)) {
      ShrinkApp.shrink(dirPath, force, function(err, fileArr, outputPath, appConf) {
        if (err) {
          console.log(err);
        } else {
          if (displayAnalysis) {
            console.log(appConf.analysis.getReport().toString());
          }
          console.log(underlineMsg('The following directory has been generated successfully!'));
          console.log('');
          console.log('  --> ' + outputPath);
          console.log('');
          console.log('');
          console.log(underlineMsg('The following files have been processed successfully!'));
          console.log('');
          if (fileArr && fileArr.length) {
            fileArr.forEach(function(fileName) {
              console.log('  ---> ' + fileName);
            });
          } else {
            console.log('  NONE');
          }
        }
      });
    } else {
      console.log(appConfig + ' file is missing. Please create one with the following sample content and re-run the command:');
      console.log('');
      console.log('{"app-name": "app"}');
      console.log('');
      console.log('Please refer to https://github.com/4mgad/ShrinkApp/wiki for more information on app.json configuration attributes.');
      console.log('');
      console.log('');
      console.log('OR run the following command:');
      console.log('');
      console.log('shinkapp -c ' + dirPath);
    }
  } else {
    console.log(dirPath + ' does not exist');
  }
};

var createAppConf = function(appConf, callback) {
  appConf = appConf || {};
  var appConfig = dirPath + '/app.json';
  if (force || !fs.existsSync(appConfig)) {
    fs.writeFileSync(appConfig, JSON.stringify(appConf));
    callback(appConfig + ' was created successfully');
  } else {
    callback(appConfig + ' already exists');
  }
};

var parseSwitches = function(onParse) {
  var switchHandlers = [];
  var args = process.argv.slice(2);

  //process command switches
  var skipNext = false;
  args.forEach(function(arg, idx) {
    if (skipNext) {
      skipNext = false;
    } else {
      if (arg) {
        if (arg.charAt(0) === '-') {
          switch (arg) {
            case '-v':
            case '--version':
              switchHandlers.push({
                handler: function(callback) {
                  callback(pkg.version);
                }
              });
              break;
            case '-h':
            case '--help':
              switchHandlers.push({
                handler: function(callback) {
                  var help = fs.readFileSync(__dirname + '/help', 'utf8');
                  callback(help);
                }
              });
              break;
            case '-f':
            case '--force':
              switchHandlers.push({
                handler: function(callback) {
                  force = true;
                  callback();
                }
              });
              break;
            case '-a':
            case '--analysis':
              switchHandlers.push({
                handler: function(callback) {
                  displayAnalysis = true;
                  callback();
                }
              });
              break;
            case '-c':
            case '--create-app':
              var nextArg = args[idx + 1];
              if (!nextArg || nextArg.charAt(0) === '-') {
                //no next argument or next argument is a switch
                switchHandlers.push({
                  handler: function(callback) {
                    console.log('Please enter the following information :-');
                    var appConf = {};
                    var defaultAppConf = Config.getDefaultAppConf();
                    var appConfHelp = Config.getAppConfHelp();
                    var rl = readline.createInterface({
                      input: process.stdin,
                      output: process.stdout
                    });
                    var keys = Object.keys(appConfHelp);
                    var idx = -1;
                    var askNextQuestion = function() {
                      idx++;
                      var key = keys[idx];
                      if (key) {
                        var question = appConfHelp[key];
                        var defValue = defaultAppConf[key];
                        rl.question('- ' + question + ' (' + defValue + '?)' + ': ', function(answer) {
                          appConf[key] = answer ? answer : defValue;
                          askNextQuestion();
                        });
                      } else {
                        rl.close();
                        createAppConf(appConf, callback);
                      }
                    };
                    askNextQuestion();
                  }
                });
              } else if (nextArg && nextArg.charAt(0) !== '-') {
                //next argument exists and it's not a switch
                //assume that this argument is the application name
                switchHandlers.push({
                  handler: function(callback) {
                    var appConf = {
                      "app-name": nextArg
                    };
                    createAppConf(appConf, callback);
                  }
                });
                skipNext = true;
              }
              break;
          }
        } else {
          if (!dirPath && fs.existsSync(arg)) {
            dirPath = fs.realpathSync(arg);
          } else {
            switchHandlers.push({
              handler: function(callback) {
                callback('Please specify only one directory to shrink');
              }
            });
          }
        }
      }
    }
  });

  if (!dirPath) {
    dirPath = fs.realpathSync('.');
  }

  var idx = -1;
  var shrink = true;
  var applyHandler = function() {
    idx++;
    var switchHandler = switchHandlers[idx];
    if (switchHandler) {
      switchHandler.handler(function(err) {
        if (err) {
          shrink = false;
          console.log(err);
        }
        applyHandler();
      });
    } else {
      onParse(shrink);
    }
  };
  applyHandler();
};

parseSwitches(function(shrink) {
  if (shrink) {
    shrinkApp();
  }
});
